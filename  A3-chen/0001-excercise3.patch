From 217230ef88212cf47b3d7ae9575b5df64d8fe044 Mon Sep 17 00:00:00 2001
From: zhanwang <zhanwang.c@gmail.com>
Date: Fri, 2 Feb 2018 13:13:24 +0100
Subject: [PATCH] excercise3

---
 .../aim3/assignment2/AverageFriendFoeRatio.java    | 164 +++++++++++++++++++
 .../de/tuberlin/dima/aim3/assignment2/Config.java  |   2 +-
 .../aim3/assignment2/InDegreeDistribution.java     | 162 +++++++++++++++++++
 .../aim3/assignment2/OutDegreeDistributionFoe.java | 173 +++++++++++++++++++++
 .../aim3/assignment2/OutDegreeDistributionFri.java | 173 +++++++++++++++++++++
 5 files changed, 673 insertions(+), 1 deletion(-)
 create mode 100644 NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/AverageFriendFoeRatio.java
 create mode 100644 NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/InDegreeDistribution.java
 create mode 100644 NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/OutDegreeDistributionFoe.java
 create mode 100644 NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/OutDegreeDistributionFri.java

diff --git a/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/AverageFriendFoeRatio.java b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/AverageFriendFoeRatio.java
new file mode 100644
index 0000000..8e85e3c
--- /dev/null
+++ b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/AverageFriendFoeRatio.java
@@ -0,0 +1,164 @@
+/**
+ * AIM3 - Scalable Data Mining -  course work
+ * Copyright (C) 2014  Sebastian Schelter
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package de.tuberlin.dima.aim3.assignment2;
+
+import com.google.common.collect.Iterables;
+import org.apache.flink.api.common.functions.FlatMapFunction;
+import org.apache.flink.api.common.functions.FilterFunction;
+import org.apache.flink.api.common.functions.ReduceFunction;
+import org.apache.flink.api.common.functions.GroupReduceFunction;
+import org.apache.flink.api.common.functions.RichGroupReduceFunction;
+import org.apache.flink.api.java.DataSet;
+import org.apache.flink.api.java.ExecutionEnvironment;
+import org.apache.flink.api.java.operators.DataSource;
+import org.apache.flink.api.java.tuple.Tuple1;
+import org.apache.flink.api.java.tuple.Tuple2;
+import org.apache.flink.api.java.tuple.Tuple3;
+import org.apache.flink.configuration.Configuration;
+import org.apache.flink.core.fs.FileSystem;
+import org.apache.flink.util.Collector;
+
+import java.util.Iterator;
+import java.util.regex.Pattern;
+
+public class AverageFriendFoeRatio {
+
+  public static void main(String[] args) throws Exception {
+
+    ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();
+
+    DataSource<String> input = env.readTextFile(Config.pathToSlashdotZoo());
+
+    /* Convert the input to edges, consisting of (source, target, isFriend ) */
+    DataSet<Tuple3<Long, Long, Boolean>> edges = input.flatMap(new EdgeReader());
+
+    /* Create a dataset of all vertex ids and count them */
+    DataSet<Long> numVertices =
+        edges.project(0).types(Long.class)
+            .union(edges.project(1).types(Long.class))
+            .distinct().reduceGroup(new CountVertices());
+
+    /* Compute the degree of every vertex */
+    DataSet<Tuple2<Long, Double>> verticesWithRatio =
+        edges.project(0,2).types(Long.class,Boolean.class)
+             .groupBy(0).reduceGroup(new RatioOfVertex());
+    DataSet<Tuple2<Long, Double>> AverageFriendFoeRatio  = verticesWithRatio.filter(new FilterFunction<Tuple2<Long, Double>>() {
+      @Override
+      public boolean filter(Tuple2<Long, Double> value) throws Exception {
+        return value.f1 != 0;
+      }
+    } ).reduce(new ReduceFunction<Tuple2<Long, Double>>() {
+      @Override
+      public Tuple2<Long, Double> reduce(Tuple2<Long, Double> value1, Tuple2<Long, Double> value2)
+              throws Exception {
+        return new Tuple2<Long, Double>(1L,(value1.f1 + value2.f1)/2);
+      }
+    });
+
+
+
+//    degreeDistribution.writeAsText(Config.outputPath(), FileSystem.WriteMode.OVERWRITE);
+//    //.setParallelism(1);
+    AverageFriendFoeRatio.writeAsText(Config.outputPath()+"AverageFriendFoeRatio.txt", FileSystem.WriteMode.OVERWRITE).setParallelism(1);
+
+    env.execute();
+  }
+
+  public static class EdgeReader implements FlatMapFunction<String, Tuple3<Long, Long, Boolean>> {
+
+    private static final Pattern SEPARATOR = Pattern.compile("[ \t,]");
+
+    @Override
+    public void flatMap(String s, Collector<Tuple3<Long, Long, Boolean>> collector) throws Exception {
+      if (!s.startsWith("%")) {
+        String[] tokens = SEPARATOR.split(s);
+
+        long source = Long.parseLong(tokens[0]);
+        long target = Long.parseLong(tokens[1]);
+        boolean isFriend = "+1".equals(tokens[2]);
+
+        collector.collect(new Tuple3<Long, Long, Boolean>(source, target, isFriend));
+      }
+    }
+  }
+
+  public static class CountVertices implements GroupReduceFunction<Tuple1<Long>, Long> {
+    @Override
+    public void reduce(Iterable<Tuple1<Long>> vertices, Collector<Long> collector) throws Exception {
+      collector.collect(new Long(Iterables.size(vertices)));
+    }
+  }
+
+
+  public static class RatioOfVertex implements GroupReduceFunction<Tuple2<Long,Boolean >, Tuple2<Long, Double>> {
+    @Override
+    public void reduce(Iterable<Tuple2<Long,Boolean >> tuples, Collector<Tuple2<Long, Double>> collector) throws Exception {
+
+      Iterator<Tuple2<Long,Boolean >> iterator = tuples.iterator();
+      Long vertexId = null;
+
+      long friend = 0L;
+      long foe = 0L;
+      while (iterator.hasNext()) {
+        Tuple2<Long,Boolean > t = iterator.next();
+        vertexId = t.f0;
+        if(t.f1){
+          friend++;
+        }
+        if(!t.f1){
+          foe++;
+        }
+
+      }
+      Double friendFoeRatio = 0D;
+      if(friend!=0 && foe!=0){
+        friendFoeRatio = 1.0*friend/foe;
+      }
+
+      collector.collect(new Tuple2<Long, Double>(vertexId, friendFoeRatio));
+    }
+  }
+
+  public static class DistributionElement extends RichGroupReduceFunction<Tuple2<Long, Long>, Tuple2<Long, Double>> {
+
+    private long numVertices;
+
+    @Override
+    public void open(Configuration parameters) throws Exception {
+      super.open(parameters);
+      numVertices = getRuntimeContext().<Long>getBroadcastVariable("numVertices").get(0);
+    }
+
+    @Override
+    public void reduce(Iterable<Tuple2<Long, Long>> verticesWithDegree, Collector<Tuple2<Long, Double>> collector) throws Exception {
+
+      Iterator<Tuple2<Long, Long>> iterator = verticesWithDegree.iterator();
+      Long degree = iterator.next().f1;
+
+      long count = 1L;
+      while (iterator.hasNext()) {
+        iterator.next();
+        count++;
+      }
+
+      collector.collect(new Tuple2<Long, Double>(degree, (double) count / numVertices));
+    }
+  }
+
+}
diff --git a/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/Config.java b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/Config.java
index 5a42607..774f185 100644
--- a/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/Config.java
+++ b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/Config.java
@@ -23,7 +23,7 @@ public class Config {
   private Config() {}
 
   public static String pathToSlashdotZoo() {
-    return "/home/ssc/Downloads/out.matrix";
+    return "/home/zhanwang/Documents/AIM3/homework3/slashdot-zoo/out.matrix";
   }
 
   public static String outputPath() {
diff --git a/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/InDegreeDistribution.java b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/InDegreeDistribution.java
new file mode 100644
index 0000000..0847883
--- /dev/null
+++ b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/InDegreeDistribution.java
@@ -0,0 +1,162 @@
+/**
+ * AIM3 - Scalable Data Mining -  course work
+ * Copyright (C) 2014  Sebastian Schelter
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package de.tuberlin.dima.aim3.assignment2;
+
+import com.google.common.collect.Iterables;
+import org.apache.flink.api.common.functions.FlatMapFunction;
+import org.apache.flink.api.common.functions.GroupReduceFunction;
+import org.apache.flink.api.common.functions.RichGroupReduceFunction;
+import org.apache.flink.api.common.functions.RichMapFunction;
+import org.apache.flink.api.java.DataSet;
+import org.apache.flink.api.java.ExecutionEnvironment;
+import org.apache.flink.api.java.operators.DataSource;
+import org.apache.flink.api.java.tuple.Tuple1;
+import org.apache.flink.api.java.tuple.Tuple2;
+import org.apache.flink.api.java.tuple.Tuple3;
+import org.apache.flink.configuration.Configuration;
+import org.apache.flink.core.fs.FileSystem;
+import org.apache.flink.util.Collector;
+
+import java.util.Iterator;
+import java.util.regex.Pattern;
+
+public class InDegreeDistribution {
+
+  public static void main(String[] args) throws Exception {
+
+    ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();
+
+    DataSource<String> input = env.readTextFile(Config.pathToSlashdotZoo());
+
+    /* Convert the input to edges, consisting of (source, target, isFriend ) */
+    DataSet<Tuple3<Long, Long, Boolean>> edges = input.flatMap(new EdgeReader());
+
+    /* Create a dataset of all vertex ids and count them */
+    DataSet<Long> numVertices =
+        edges.project(0).types(Long.class)
+            .union(edges.project(1).types(Long.class))
+            .distinct().reduceGroup(new CountVertices());
+
+    /* Compute the degree of every vertex */
+    DataSet<Tuple2<Long, Long>> verticesWithDegree =
+        edges.project(1).types(Long.class)
+             .groupBy(0).reduceGroup(new DegreeOfVertex());
+
+    /* Compute the degree distribution */
+    DataSet<Tuple2<Long, Double>> degreeDistribution =
+        verticesWithDegree.groupBy(1).reduceGroup(new DistributionElement())
+                                     .withBroadcastSet(numVertices, "numVertices");
+    DataSet<Long> numVerticesinSecondColumn =
+            edges.project(1).types(Long.class)
+                    .distinct().reduceGroup(new CountVertices());
+    DataSet<Tuple2<Long, Double>> zeroDegreeDistribution =
+            numVerticesinSecondColumn.map(new RichMapFunction<Long, Tuple2<Long, Double>>() {
+              long numVertices;
+              @Override
+              public void open(Configuration parameters) throws Exception {
+                super.open(parameters);
+                numVertices = getRuntimeContext().<Long>getBroadcastVariable("numVertices").get(0);
+              }
+              @Override
+              public Tuple2<Long, Double> map(Long value) throws Exception {
+                //System.out.println("######");
+                //System.out.println((numVertices-value));
+                //System.out.println((double)(numVertices-value)/ numVertices);
+                return new Tuple2<Long, Double>(0L, ((double) (numVertices-value)) / numVertices);
+              }
+            }).withBroadcastSet(numVertices, "numVertices");
+//    degreeDistribution.writeAsText(Config.outputPath(), FileSystem.WriteMode.OVERWRITE);
+//    //.setParallelism(1);
+    degreeDistribution.union(zeroDegreeDistribution.distinct()).writeAsCsv(Config.outputPath()+"InDegreeD.csv", FileSystem.WriteMode.OVERWRITE).setParallelism(1);
+
+    //degreeDistribution.writeAsCsv(Config.outputPath()+"InDegreeD.csv", FileSystem.WriteMode.OVERWRITE).setParallelism(1);
+
+    env.execute();
+  }
+
+  public static class EdgeReader implements FlatMapFunction<String, Tuple3<Long, Long, Boolean>> {
+
+    private static final Pattern SEPARATOR = Pattern.compile("[ \t,]");
+
+    @Override
+    public void flatMap(String s, Collector<Tuple3<Long, Long, Boolean>> collector) throws Exception {
+      if (!s.startsWith("%")) {
+        String[] tokens = SEPARATOR.split(s);
+
+        long source = Long.parseLong(tokens[0]);
+        long target = Long.parseLong(tokens[1]);
+        boolean isFriend = "+1".equals(tokens[2]);
+
+        collector.collect(new Tuple3<Long, Long, Boolean>(source, target, isFriend));
+      }
+    }
+  }
+
+  public static class CountVertices implements GroupReduceFunction<Tuple1<Long>, Long> {
+    @Override
+    public void reduce(Iterable<Tuple1<Long>> vertices, Collector<Long> collector) throws Exception {
+      collector.collect(new Long(Iterables.size(vertices)));
+    }
+  }
+
+
+  public static class DegreeOfVertex implements GroupReduceFunction<Tuple1<Long>, Tuple2<Long, Long>> {
+    @Override
+    public void reduce(Iterable<Tuple1<Long>> tuples, Collector<Tuple2<Long, Long>> collector) throws Exception {
+
+      Iterator<Tuple1<Long>> iterator = tuples.iterator();
+      Long vertexId = iterator.next().f0;
+
+      long count = 1L;
+      while (iterator.hasNext()) {
+        iterator.next();
+        count++;
+      }
+
+      collector.collect(new Tuple2<Long, Long>(vertexId, count));
+    }
+  }
+
+  public static class DistributionElement extends RichGroupReduceFunction<Tuple2<Long, Long>, Tuple2<Long, Double>> {
+
+    private long numVertices;
+
+    @Override
+    public void open(Configuration parameters) throws Exception {
+      super.open(parameters);
+      numVertices = getRuntimeContext().<Long>getBroadcastVariable("numVertices").get(0);
+    }
+
+    @Override
+    public void reduce(Iterable<Tuple2<Long, Long>> verticesWithDegree, Collector<Tuple2<Long, Double>> collector) throws Exception {
+
+      Iterator<Tuple2<Long, Long>> iterator = verticesWithDegree.iterator();
+      Long degree = iterator.next().f1;
+
+      long count = 1L;
+      while (iterator.hasNext()) {
+        iterator.next();
+        count++;
+      }
+
+      collector.collect(new Tuple2<Long, Double>(degree, (double) count / numVertices));
+    }
+  }
+
+}
diff --git a/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/OutDegreeDistributionFoe.java b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/OutDegreeDistributionFoe.java
new file mode 100644
index 0000000..af34387
--- /dev/null
+++ b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/OutDegreeDistributionFoe.java
@@ -0,0 +1,173 @@
+/**
+ * AIM3 - Scalable Data Mining -  course work
+ * Copyright (C) 2014  Sebastian Schelter
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package de.tuberlin.dima.aim3.assignment2;
+
+import com.google.common.collect.Iterables;
+import org.apache.flink.api.common.functions.*;
+import org.apache.flink.api.java.DataSet;
+import org.apache.flink.api.java.ExecutionEnvironment;
+import org.apache.flink.api.java.operators.DataSource;
+import org.apache.flink.api.java.tuple.Tuple1;
+import org.apache.flink.api.java.tuple.Tuple2;
+import org.apache.flink.api.java.tuple.Tuple3;
+import org.apache.flink.configuration.Configuration;
+import org.apache.flink.core.fs.FileSystem;
+import org.apache.flink.util.Collector;
+
+import java.util.Iterator;
+import java.util.regex.Pattern;
+
+public class OutDegreeDistributionFoe {
+
+  public static void main(String[] args) throws Exception {
+
+    ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();
+
+    DataSource<String> input = env.readTextFile(Config.pathToSlashdotZoo());
+
+    /* Convert the input to edges, consisting of (source, target, isFriend ) */
+    DataSet<Tuple3<Long, Long, Boolean>> edges = input.flatMap(new EdgeReader());
+    edges=edges.filter(new FilterFunction<Tuple3<Long, Long, Boolean>>() {
+
+
+      @Override
+      public boolean filter(Tuple3<Long, Long, Boolean> value) throws Exception {
+
+        return !value.f2;
+
+
+      }
+    });
+
+    /* Create a dataset of all vertex ids and count them */
+    DataSet<Long> numVertices =
+        edges.project(0).types(Long.class)
+            .union(edges.project(1).types(Long.class))
+            .distinct().reduceGroup(new CountVertices());
+
+    DataSet<Long> numVerticesinFirstColumn =
+            edges.project(0).types(Long.class)
+                    .distinct().reduceGroup(new CountVertices());
+
+    /* Compute the degree of every vertex */
+    DataSet<Tuple2<Long, Long>> verticesWithDegree =
+        edges.project(0).types(Long.class)
+             .groupBy(0).reduceGroup(new DegreeOfVertex());
+
+    /* Compute the degree distribution */
+    DataSet<Tuple2<Long, Double>> degreeDistribution =
+        verticesWithDegree.groupBy(1).reduceGroup(new DistributionElement())
+                                     .withBroadcastSet(numVertices, "numVertices");
+
+    DataSet<Tuple2<Long, Double>> zeroDegreeDistribution =
+            numVerticesinFirstColumn.map(new RichMapFunction<Long, Tuple2<Long, Double>>() {
+              long numVertices;
+              @Override
+              public void open(Configuration parameters) throws Exception {
+                super.open(parameters);
+                numVertices = getRuntimeContext().<Long>getBroadcastVariable("numVertices").get(0);
+              }
+              @Override
+              public Tuple2<Long, Double> map(Long value) throws Exception {
+                //System.out.println("######");
+                //System.out.println((numVertices-value));
+                //System.out.println((double)(numVertices-value)/ numVertices);
+                return new Tuple2<Long, Double>(0L, ((double) (numVertices-value)) / numVertices);
+              }
+            }).withBroadcastSet(numVertices, "numVertices");
+                    ;
+//    degreeDistribution.writeAsText(Config.outputPath(), FileSystem.WriteMode.OVERWRITE);
+//    //.setParallelism(1);
+    //zeroDegreeDistribution.print();
+    degreeDistribution.union(zeroDegreeDistribution.distinct()).writeAsCsv(Config.outputPath()+"OutDegreeDFOe.csv", FileSystem.WriteMode.OVERWRITE).setParallelism(1);
+    //degreeDistribution.writeAsCsv(Config.outputPath()+"OutDegreeD.csv", FileSystem.WriteMode.OVERWRITE).setParallelism(1);
+
+    env.execute();
+  }
+
+  public static class EdgeReader implements FlatMapFunction<String, Tuple3<Long, Long, Boolean>> {
+
+    private static final Pattern SEPARATOR = Pattern.compile("[ \t,]");
+
+    @Override
+    public void flatMap(String s, Collector<Tuple3<Long, Long, Boolean>> collector) throws Exception {
+      if (!s.startsWith("%")) {
+        String[] tokens = SEPARATOR.split(s);
+
+        long source = Long.parseLong(tokens[0]);
+        long target = Long.parseLong(tokens[1]);
+        boolean isFriend = "+1".equals(tokens[2]);
+
+        collector.collect(new Tuple3<Long, Long, Boolean>(source, target, isFriend));
+      }
+    }
+  }
+
+  public static class CountVertices implements GroupReduceFunction<Tuple1<Long>, Long> {
+    @Override
+    public void reduce(Iterable<Tuple1<Long>> vertices, Collector<Long> collector) throws Exception {
+      collector.collect(new Long(Iterables.size(vertices)));
+    }
+  }
+
+
+  public static class DegreeOfVertex implements GroupReduceFunction<Tuple1<Long>, Tuple2<Long, Long>> {
+    @Override
+    public void reduce(Iterable<Tuple1<Long>> tuples, Collector<Tuple2<Long, Long>> collector) throws Exception {
+
+      Iterator<Tuple1<Long>> iterator = tuples.iterator();
+      Long vertexId = iterator.next().f0;
+
+      long count = 1L;
+      while (iterator.hasNext()) {
+        iterator.next();
+        count++;
+      }
+
+      collector.collect(new Tuple2<Long, Long>(vertexId, count));
+    }
+  }
+
+  public static class DistributionElement extends RichGroupReduceFunction<Tuple2<Long, Long>, Tuple2<Long, Double>> {
+
+    private long numVertices;
+
+    @Override
+    public void open(Configuration parameters) throws Exception {
+      super.open(parameters);
+      numVertices = getRuntimeContext().<Long>getBroadcastVariable("numVertices").get(0);
+    }
+
+    @Override
+    public void reduce(Iterable<Tuple2<Long, Long>> verticesWithDegree, Collector<Tuple2<Long, Double>> collector) throws Exception {
+
+      Iterator<Tuple2<Long, Long>> iterator = verticesWithDegree.iterator();
+      Long degree = iterator.next().f1;
+
+      long count = 1L;
+      while (iterator.hasNext()) {
+        iterator.next();
+        count++;
+      }
+
+      collector.collect(new Tuple2<Long, Double>(degree, (double) count / numVertices));
+    }
+  }
+
+}
diff --git a/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/OutDegreeDistributionFri.java b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/OutDegreeDistributionFri.java
new file mode 100644
index 0000000..b57104a
--- /dev/null
+++ b/NetworkStatisticsTask/src/main/java/de/tuberlin/dima/aim3/assignment2/OutDegreeDistributionFri.java
@@ -0,0 +1,173 @@
+/**
+ * AIM3 - Scalable Data Mining -  course work
+ * Copyright (C) 2014  Sebastian Schelter
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package de.tuberlin.dima.aim3.assignment2;
+
+import com.google.common.collect.Iterables;
+import org.apache.flink.api.common.functions.*;
+import org.apache.flink.api.java.DataSet;
+import org.apache.flink.api.java.ExecutionEnvironment;
+import org.apache.flink.api.java.operators.DataSource;
+import org.apache.flink.api.java.tuple.Tuple1;
+import org.apache.flink.api.java.tuple.Tuple2;
+import org.apache.flink.api.java.tuple.Tuple3;
+import org.apache.flink.configuration.Configuration;
+import org.apache.flink.core.fs.FileSystem;
+import org.apache.flink.util.Collector;
+
+import java.util.Iterator;
+import java.util.regex.Pattern;
+
+public class OutDegreeDistributionFri {
+
+  public static void main(String[] args) throws Exception {
+
+    ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();
+
+    DataSource<String> input = env.readTextFile(Config.pathToSlashdotZoo());
+
+    /* Convert the input to edges, consisting of (source, target, isFriend ) */
+    DataSet<Tuple3<Long, Long, Boolean>> edges = input.flatMap(new EdgeReader());
+    edges=edges.filter(new FilterFunction<Tuple3<Long, Long, Boolean>>() {
+
+
+      @Override
+      public boolean filter(Tuple3<Long, Long, Boolean> value) throws Exception {
+
+        return value.f2;
+
+
+      }
+    });
+
+    /* Create a dataset of all vertex ids and count them */
+    DataSet<Long> numVertices =
+        edges.project(0).types(Long.class)
+            .union(edges.project(1).types(Long.class))
+            .distinct().reduceGroup(new CountVertices());
+
+    DataSet<Long> numVerticesinFirstColumn =
+            edges.project(0).types(Long.class)
+                    .distinct().reduceGroup(new CountVertices());
+
+    /* Compute the degree of every vertex */
+    DataSet<Tuple2<Long, Long>> verticesWithDegree =
+        edges.project(0).types(Long.class)
+             .groupBy(0).reduceGroup(new DegreeOfVertex());
+
+    /* Compute the degree distribution */
+    DataSet<Tuple2<Long, Double>> degreeDistribution =
+        verticesWithDegree.groupBy(1).reduceGroup(new DistributionElement())
+                                     .withBroadcastSet(numVertices, "numVertices");
+
+    DataSet<Tuple2<Long, Double>> zeroDegreeDistribution =
+            numVerticesinFirstColumn.map(new RichMapFunction<Long, Tuple2<Long, Double>>() {
+              long numVertices;
+              @Override
+              public void open(Configuration parameters) throws Exception {
+                super.open(parameters);
+                numVertices = getRuntimeContext().<Long>getBroadcastVariable("numVertices").get(0);
+              }
+              @Override
+              public Tuple2<Long, Double> map(Long value) throws Exception {
+                //System.out.println("######");
+                //System.out.println((numVertices-value));
+                //System.out.println((double)(numVertices-value)/ numVertices);
+                return new Tuple2<Long, Double>(0L, ((double) (numVertices-value)) / numVertices);
+              }
+            }).withBroadcastSet(numVertices, "numVertices");
+                    ;
+//    degreeDistribution.writeAsText(Config.outputPath(), FileSystem.WriteMode.OVERWRITE);
+//    //.setParallelism(1);
+    //zeroDegreeDistribution.print();
+    degreeDistribution.union(zeroDegreeDistribution.distinct()).writeAsCsv(Config.outputPath()+"OutDegreeDFri.csv", FileSystem.WriteMode.OVERWRITE).setParallelism(1);
+    //degreeDistribution.writeAsCsv(Config.outputPath()+"OutDegreeD.csv", FileSystem.WriteMode.OVERWRITE).setParallelism(1);
+
+    env.execute();
+  }
+
+  public static class EdgeReader implements FlatMapFunction<String, Tuple3<Long, Long, Boolean>> {
+
+    private static final Pattern SEPARATOR = Pattern.compile("[ \t,]");
+
+    @Override
+    public void flatMap(String s, Collector<Tuple3<Long, Long, Boolean>> collector) throws Exception {
+      if (!s.startsWith("%")) {
+        String[] tokens = SEPARATOR.split(s);
+
+        long source = Long.parseLong(tokens[0]);
+        long target = Long.parseLong(tokens[1]);
+        boolean isFriend = "+1".equals(tokens[2]);
+
+        collector.collect(new Tuple3<Long, Long, Boolean>(source, target, isFriend));
+      }
+    }
+  }
+
+  public static class CountVertices implements GroupReduceFunction<Tuple1<Long>, Long> {
+    @Override
+    public void reduce(Iterable<Tuple1<Long>> vertices, Collector<Long> collector) throws Exception {
+      collector.collect(new Long(Iterables.size(vertices)));
+    }
+  }
+
+
+  public static class DegreeOfVertex implements GroupReduceFunction<Tuple1<Long>, Tuple2<Long, Long>> {
+    @Override
+    public void reduce(Iterable<Tuple1<Long>> tuples, Collector<Tuple2<Long, Long>> collector) throws Exception {
+
+      Iterator<Tuple1<Long>> iterator = tuples.iterator();
+      Long vertexId = iterator.next().f0;
+
+      long count = 1L;
+      while (iterator.hasNext()) {
+        iterator.next();
+        count++;
+      }
+
+      collector.collect(new Tuple2<Long, Long>(vertexId, count));
+    }
+  }
+
+  public static class DistributionElement extends RichGroupReduceFunction<Tuple2<Long, Long>, Tuple2<Long, Double>> {
+
+    private long numVertices;
+
+    @Override
+    public void open(Configuration parameters) throws Exception {
+      super.open(parameters);
+      numVertices = getRuntimeContext().<Long>getBroadcastVariable("numVertices").get(0);
+    }
+
+    @Override
+    public void reduce(Iterable<Tuple2<Long, Long>> verticesWithDegree, Collector<Tuple2<Long, Double>> collector) throws Exception {
+
+      Iterator<Tuple2<Long, Long>> iterator = verticesWithDegree.iterator();
+      Long degree = iterator.next().f1;
+
+      long count = 1L;
+      while (iterator.hasNext()) {
+        iterator.next();
+        count++;
+      }
+
+      collector.collect(new Tuple2<Long, Double>(degree, (double) count / numVertices));
+    }
+  }
+
+}
-- 
2.7.4

